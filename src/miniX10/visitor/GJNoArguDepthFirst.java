//
// Generated by JTB 1.3.2
//

package miniX10.visitor;
import miniX10.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * nodeListOptional -> ( TopLevelDeclaration() )*
    * nodeToken -> <EOF>
    */
   public R visit(File n) {
      R _ret=null;
      n.nodeListOptional.accept(this);
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> MainClass()
    *       | ClassDeclaration()
    */
   public R visit(TopLevelDeclaration n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "class"
    * identifier -> Identifier()
    * nodeToken2 -> "{"
    * nodeToken3 -> "public"
    * nodeToken4 -> "static"
    * nodeToken5 -> "void"
    * nodeToken6 -> "main"
    * nodeToken7 -> "("
    * nodeToken8 -> "String"
    * nodeToken9 -> "["
    * nodeToken10 -> "]"
    * identifier1 -> Identifier()
    * nodeToken11 -> ")"
    * nodeToken12 -> "{"
    * statement -> Statement()
    * nodeToken13 -> "}"
    * nodeToken14 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.identifier.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.nodeToken4.accept(this);
      n.nodeToken5.accept(this);
      n.nodeToken6.accept(this);
      n.nodeToken7.accept(this);
      n.nodeToken8.accept(this);
      n.nodeToken9.accept(this);
      n.nodeToken10.accept(this);
      n.identifier1.accept(this);
      n.nodeToken11.accept(this);
      n.nodeToken12.accept(this);
      n.statement.accept(this);
      n.nodeToken13.accept(this);
      n.nodeToken14.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( ClassMember() )*
    * nodeToken2 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeToken2.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> MethodDeclaration()
    *       | ConstantDeclaration()
    *       | UpdatableFieldDeclaration()
    */
   public R visit(ClassMember n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "static"
    * nodeToken2 -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken3 -> "="
    * expression -> Expression()
    * nodeToken4 -> ";"
    */
   public R visit(ConstantDeclaration n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.type.accept(this);
      n.identifier.accept(this);
      n.nodeToken3.accept(this);
      n.expression.accept(this);
      n.nodeToken4.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "public"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> ";"
    */
   public R visit(UpdatableFieldDeclaration n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.type.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "public"
    * returnType -> ReturnType()
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.returnType.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken2.accept(this);
      n.block.accept(this);
      return _ret;
   }

   /**
    * formalParameter -> FormalParameter()
    * nodeListOptional -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.formalParameter.accept(this);
      n.nodeListOptional.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> FinalFormalParameter()
    *       | UpdatableFormalParameter()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "final"
    * type -> Type()
    * identifier -> Identifier()
    */
   public R visit(FinalFormalParameter n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.type.accept(this);
      n.identifier.accept(this);
      return _ret;
   }

   /**
    * type -> Type()
    * identifier -> Identifier()
    */
   public R visit(UpdatableFormalParameter n) {
      R _ret=null;
      n.type.accept(this);
      n.identifier.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> ","
    * formalParameter -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.formalParameter.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> VoidType()
    *       | Type()
    */
   public R visit(ReturnType n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "void"
    */
   public R visit(VoidType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> UpdatableArrayType()
    *       | NonArrayType()
    */
   public R visit(Type n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nonArrayType -> NonArrayType()
    * nodeToken -> "["
    * nodeToken1 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken2 -> "]"
    */
   public R visit(UpdatableArrayType n) {
      R _ret=null;
      n.nonArrayType.accept(this);
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.rankEquation.accept(this);
      n.nodeToken2.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "rank"
    * nodeToken1 -> "=="
    * integerLiteral -> IntegerLiteral()
    */
   public R visit(RankEquation n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.integerLiteral.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> BooleanType()
    *       | IntegerType()
    *       | DoubleType()
    *       | StringType()
    *       | PlaceType()
    *       | DistType()
    *       | RegionType()
    *       | PointType()
    *       | ClassNameType()
    */
   public R visit(NonArrayType n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "double"
    */
   public R visit(DoubleType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "String"
    */
   public R visit(StringType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "place"
    */
   public R visit(PlaceType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "dist"
    * nodeToken1 -> "("
    * nodeToken2 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken3 -> ")"
    */
   public R visit(DistType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.rankEquation.accept(this);
      n.nodeToken3.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "region"
    * nodeToken1 -> "("
    * nodeToken2 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken3 -> ")"
    */
   public R visit(RegionType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.rankEquation.accept(this);
      n.nodeToken3.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "point"
    * nodeToken1 -> "("
    * nodeToken2 -> ":"
    * rankEquation -> RankEquation()
    * nodeToken3 -> ")"
    */
   public R visit(PointType n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.rankEquation.accept(this);
      n.nodeToken3.accept(this);
      return _ret;
   }

   /**
    * identifier -> Identifier()
    */
   public R visit(ClassNameType n) {
      R _ret=null;
      n.identifier.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> Assignment()
    *       | AsyncStatement()
    *       | Block()
    *       | FinishStatement()
    *       | IfStatement()
    *       | LoopStatement()
    *       | PostfixStatement()
    *       | PrintlnStatement()
    *       | ReturnStatement()
    *       | ThrowStatement()
    *       | WhileStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * expression -> Expression()
    * nodeToken -> "="
    * expression1 -> Expression()
    * nodeToken1 -> ";"
    */
   public R visit(Assignment n) {
      R _ret=null;
      n.expression.accept(this);
      n.nodeToken.accept(this);
      n.expression1.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "async"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * block -> Block()
    */
   public R visit(AsyncStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      n.block.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "{"
    * nodeListOptional -> ( BlockStatement() )*
    * nodeToken1 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> FinalVariableDeclaration()
    *       | UpdatableVariableDeclaration()
    *       | Statement()
    */
   public R visit(BlockStatement n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "final"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> "="
    * expression -> Expression()
    * nodeToken2 -> ";"
    */
   public R visit(FinalVariableDeclaration n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.type.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      return _ret;
   }

   /**
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken -> "="
    * expression -> Expression()
    * nodeToken1 -> ";"
    */
   public R visit(UpdatableVariableDeclaration n) {
      R _ret=null;
      n.type.accept(this);
      n.identifier.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "finish"
    * statement -> Statement()
    */
   public R visit(FinishStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.statement.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * nodeOptional -> [ ElseClause() ]
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      n.statement.accept(this);
      n.nodeOptional.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "else"
    * statement -> Statement()
    */
   public R visit(ElseClause n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.statement.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "for"
    * nodeToken1 -> "("
    * pointType -> PointType()
    * explodedSpecification -> ExplodedSpecification()
    * nodeToken2 -> ":"
    * expression -> Expression()
    * nodeToken3 -> ")"
    * statement -> Statement()
    */
   public R visit(LoopStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.pointType.accept(this);
      n.explodedSpecification.accept(this);
      n.nodeToken2.accept(this);
      n.expression.accept(this);
      n.nodeToken3.accept(this);
      n.statement.accept(this);
      return _ret;
   }

   /**
    * identifierList -> IdentifierList()
    */
   public R visit(ExplodedSpecification n) {
      R _ret=null;
      n.identifierList.accept(this);
      return _ret;
   }

   /**
    * identifier -> Identifier()
    */
   public R visit(PointName n) {
      R _ret=null;
      n.identifier.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "["
    * identifier -> Identifier()
    * nodeListOptional -> ( IdentifierRest() )*
    * nodeToken1 -> "]"
    */
   public R visit(IdentifierList n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> ","
    * identifier -> Identifier()
    */
   public R visit(IdentifierRest n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      return _ret;
   }

   /**
    * expression -> Expression()
    * nodeToken -> ";"
    */
   public R visit(PostfixStatement n) {
      R _ret=null;
      n.expression.accept(this);
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "System.out.println"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(PrintlnStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "return"
    * nodeOptional -> [ Expression() ]
    * nodeToken1 -> ";"
    */
   public R visit(ReturnStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "throw"
    * nodeToken1 -> "new"
    * nodeToken2 -> "RuntimeException"
    * nodeToken3 -> "("
    * expression -> Expression()
    * nodeToken4 -> ")"
    * nodeToken5 -> ";"
    */
   public R visit(ThrowStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.expression.accept(this);
      n.nodeToken4.accept(this);
      n.nodeToken5.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      n.statement.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> InclusiveOrExpression()
    *       | EqualsExpression()
    *       | NotEqualsExpression()
    *       | GreaterThanExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivideExpression()
    *       | SinExpression()
    *       | CosExpression()
    *       | PowExpression()
    *       | AbsExpression()
    *       | MapExpression()
    *       | RegionConstant()
    *       | UnaryMinusExpression()
    *       | CoercionToIntExpression()
    *       | CoercionToDoubleExpression()
    *       | TypeAnnotatedExpression()
    *       | FactoryBlock()
    *       | ArrayAccess()
    *       | DotDistribution()
    *       | DotIsFirst()
    *       | DotMethodCall()
    *       | DotIdentifier()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "|"
    * expression -> Expression()
    */
   public R visit(InclusiveOrExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "=="
    * expression -> Expression()
    */
   public R visit(EqualsExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "!="
    * expression -> Expression()
    */
   public R visit(NotEqualsExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> ">"
    * expression -> Expression()
    */
   public R visit(GreaterThanExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "+"
    * expression -> Expression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "-"
    * expression -> Expression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "*"
    * expression -> Expression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "/"
    * expression -> Expression()
    */
   public R visit(DivideExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "sin"
    * nodeToken3 -> "("
    * expression -> Expression()
    * nodeToken4 -> ")"
    */
   public R visit(SinExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.expression.accept(this);
      n.nodeToken4.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "cos"
    * nodeToken3 -> "("
    * expression -> Expression()
    * nodeToken4 -> ")"
    */
   public R visit(CosExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.expression.accept(this);
      n.nodeToken4.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "pow"
    * nodeToken3 -> "("
    * expression -> Expression()
    * nodeToken4 -> ","
    * expression1 -> Expression()
    * nodeToken5 -> ")"
    */
   public R visit(PowExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.expression.accept(this);
      n.nodeToken4.accept(this);
      n.expression1.accept(this);
      n.nodeToken5.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Math"
    * nodeToken1 -> "."
    * nodeToken2 -> "abs"
    * nodeToken3 -> "("
    * expression -> Expression()
    * nodeToken4 -> ")"
    */
   public R visit(AbsExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.expression.accept(this);
      n.nodeToken4.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "->"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(MapExpression n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.primaryExpression1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "["
    * colonExpression -> ColonExpression()
    * nodeOptional -> ( ColonRest() )?
    * nodeToken1 -> "]"
    */
   public R visit(RegionConstant n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.colonExpression.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> ","
    * colonExpression -> ColonExpression()
    */
   public R visit(ColonRest n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.colonExpression.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> ColonPair()
    *       | Expression()
    */
   public R visit(ColonExpression n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * expression -> Expression()
    * nodeToken -> ":"
    * expression1 -> Expression()
    */
   public R visit(ColonPair n) {
      R _ret=null;
      n.expression.accept(this);
      n.nodeToken.accept(this);
      n.expression1.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "-"
    * primaryExpression -> PrimaryExpression()
    */
   public R visit(UnaryMinusExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.primaryExpression.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "("
    * nodeToken1 -> "int"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public R visit(CoercionToIntExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "("
    * nodeToken1 -> "double"
    * nodeToken2 -> ")"
    * expression -> Expression()
    */
   public R visit(CoercionToDoubleExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "("
    * typeAnnotation -> TypeAnnotation()
    * nodeToken1 -> ")"
    * expression -> Expression()
    */
   public R visit(TypeAnnotatedExpression n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.typeAnnotation.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> UpdatableArrayType()
    *       | DistType()
    */
   public R visit(TypeAnnotation n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> Literal()
    *       | This()
    *       | AllocationExpression()
    *       | Identifier()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "this"
    */
   public R visit(This n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "dist.factory.block"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    */
   public R visit(FactoryBlock n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "["
    * expressionList -> ExpressionList()
    * nodeToken1 -> "]"
    */
   public R visit(ArrayAccess n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.expressionList.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( ExpressionList() )?
    * nodeToken2 -> ")"
    */
   public R visit(DotMethodCall n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken2.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * nodeToken1 -> "distribution"
    */
   public R visit(DotDistribution n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * nodeToken1 -> "isFirst"
    * nodeToken2 -> "("
    * nodeToken3 -> ")"
    */
   public R visit(DotIsFirst n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      return _ret;
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * identifier -> Identifier()
    */
   public R visit(DotIdentifier n) {
      R _ret=null;
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> NewObject()
    *       | NewUpdatableArray()
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "new"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> [ ExpressionList() ]
    * nodeToken2 -> ")"
    */
   public R visit(NewObject n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken2.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "new"
    * nonArrayType -> NonArrayType()
    * nodeToken1 -> "["
    * identifier -> Identifier()
    * nodeToken2 -> "]"
    * nodeOptional -> [ ArrayInitializer() ]
    */
   public R visit(NewUpdatableArray n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.nonArrayType.accept(this);
      n.nodeToken1.accept(this);
      n.identifier.accept(this);
      n.nodeToken2.accept(this);
      n.nodeOptional.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> IntegerLiteral()
    *       | FloatingPointLiteral()
    *       | StringLiteral()
    *       | HereLiteral()
    *       | DistUnique()
    */
   public R visit(Literal n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> <FLOATING_POINT_LITERAL>
    */
   public R visit(FloatingPointLiteral n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> <STRING_LITERAL>
    */
   public R visit(StringLiteral n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "here"
    */
   public R visit(HereLiteral n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "dist.UNIQUE"
    */
   public R visit(DistUnique n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * expression -> Expression()
    * nodeListOptional -> ( ArgumentRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.expression.accept(this);
      n.nodeListOptional.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> ","
    * expression -> Expression()
    */
   public R visit(ArgumentRest n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.expression.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "("
    * pointType -> PointType()
    * explodedSpecification -> ExplodedSpecification()
    * nodeToken1 -> ")"
    * block -> Block()
    */
   public R visit(ArrayInitializer n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.pointType.accept(this);
      n.explodedSpecification.accept(this);
      n.nodeToken1.accept(this);
      n.block.accept(this);
      return _ret;
   }

}
