//
// Generated by JTB 1.3.2
//

package miniX10.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "public"
 * nodeToken1 -> "class"
 * identifier -> Identifier()
 * nodeToken2 -> "{"
 * nodeToken3 -> "public"
 * nodeToken4 -> "static"
 * nodeToken5 -> "void"
 * nodeToken6 -> "main"
 * nodeToken7 -> "("
 * nodeToken8 -> "String"
 * nodeToken9 -> "["
 * nodeToken10 -> "]"
 * identifier1 -> Identifier()
 * nodeToken11 -> ")"
 * nodeToken12 -> "{"
 * statement -> Statement()
 * nodeToken13 -> "}"
 * nodeToken14 -> "}"
 */
public class MainClass implements Node {
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public Identifier identifier;
   public NodeToken nodeToken2;
   public NodeToken nodeToken3;
   public NodeToken nodeToken4;
   public NodeToken nodeToken5;
   public NodeToken nodeToken6;
   public NodeToken nodeToken7;
   public NodeToken nodeToken8;
   public NodeToken nodeToken9;
   public NodeToken nodeToken10;
   public Identifier identifier1;
   public NodeToken nodeToken11;
   public NodeToken nodeToken12;
   public Statement statement;
   public NodeToken nodeToken13;
   public NodeToken nodeToken14;

   public MainClass(NodeToken n0, NodeToken n1, Identifier n2, NodeToken n3, NodeToken n4, NodeToken n5, NodeToken n6, NodeToken n7, NodeToken n8, NodeToken n9, NodeToken n10, NodeToken n11, Identifier n12, NodeToken n13, NodeToken n14, Statement n15, NodeToken n16, NodeToken n17) {
      nodeToken = n0;
      nodeToken1 = n1;
      identifier = n2;
      nodeToken2 = n3;
      nodeToken3 = n4;
      nodeToken4 = n5;
      nodeToken5 = n6;
      nodeToken6 = n7;
      nodeToken7 = n8;
      nodeToken8 = n9;
      nodeToken9 = n10;
      nodeToken10 = n11;
      identifier1 = n12;
      nodeToken11 = n13;
      nodeToken12 = n14;
      statement = n15;
      nodeToken13 = n16;
      nodeToken14 = n17;
   }

   public MainClass(Identifier n0, Identifier n1, Statement n2) {
      nodeToken = new NodeToken("public");
      nodeToken1 = new NodeToken("class");
      identifier = n0;
      nodeToken2 = new NodeToken("{");
      nodeToken3 = new NodeToken("public");
      nodeToken4 = new NodeToken("static");
      nodeToken5 = new NodeToken("void");
      nodeToken6 = new NodeToken("main");
      nodeToken7 = new NodeToken("(");
      nodeToken8 = new NodeToken("String");
      nodeToken9 = new NodeToken("[");
      nodeToken10 = new NodeToken("]");
      identifier1 = n1;
      nodeToken11 = new NodeToken(")");
      nodeToken12 = new NodeToken("{");
      statement = n2;
      nodeToken13 = new NodeToken("}");
      nodeToken14 = new NodeToken("}");
   }

   public void accept(miniX10.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(miniX10.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(miniX10.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(miniX10.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

