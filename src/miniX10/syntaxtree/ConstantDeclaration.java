//
// Generated by JTB 1.3.2
//

package miniX10.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "public"
 * nodeToken1 -> "static"
 * nodeToken2 -> "final"
 * type -> Type()
 * identifier -> Identifier()
 * nodeToken3 -> "="
 * expression -> Expression()
 * nodeToken4 -> ";"
 */
public class ConstantDeclaration implements Node {
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public Type type;
   public Identifier identifier;
   public NodeToken nodeToken3;
   public Expression expression;
   public NodeToken nodeToken4;

   public ConstantDeclaration(NodeToken n0, NodeToken n1, NodeToken n2, Type n3, Identifier n4, NodeToken n5, Expression n6, NodeToken n7) {
      nodeToken = n0;
      nodeToken1 = n1;
      nodeToken2 = n2;
      type = n3;
      identifier = n4;
      nodeToken3 = n5;
      expression = n6;
      nodeToken4 = n7;
   }

   public ConstantDeclaration(Type n0, Identifier n1, Expression n2) {
      nodeToken = new NodeToken("public");
      nodeToken1 = new NodeToken("static");
      nodeToken2 = new NodeToken("final");
      type = n0;
      identifier = n1;
      nodeToken3 = new NodeToken("=");
      expression = n2;
      nodeToken4 = new NodeToken(";");
   }

   public void accept(miniX10.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(miniX10.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(miniX10.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(miniX10.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

